name: Checks

permissions:
  contents: read

on:
  pull_request:
  push:


jobs:
  build-backend:
    name: Build and test backend
    runs-on: ubuntu-latest
    steps:
      - name: Checkout sources
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
        with:
          persist-credentials: false

      - name: Install toolchain
        uses: dtolnay/rust-toolchain@b3b07ba8b418998c39fb20f53e8b695cdcc8de1b
        with:
          toolchain: stable

      - name: Install cargo-llvm-cov
        uses: taiki-e/install-action@83254c543806f3224380bf1001d6fac8feaf2d0b # v2.50.10
        with:
          tool: cargo-llvm-cov

      - name: Rust cache
        uses: Swatinem/rust-cache@9d47c6ad4b02e050fd481d890b2ea34778fd09d6 # v2.7.8

      - name: Setup Postgres DB
        working-directory: backend
        run: |
          docker compose up db --wait && \
          cargo install sqlx-cli --no-default-features --features rustls,postgres && \
          cargo sqlx migrate run --source migrations

      - name: create empty `dist` directory in the frontend
        working-directory: frontend
        run: mkdir dist

      - name: cargo build
        working-directory: backend
        run: cargo build

      - name: cargo test
        working-directory: backend
        run: cargo llvm-cov --lcov --output-path lcov.info
        env:
          RUST_BACKTRACE: 1

      - name: Bring Postgres DB down
        run: docker compose down

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@ad3126e916f78f00edff4ed0317cf185271ccc2d # v5.4.2
        with:
          files: lcov.info
          fail_ci_if_error: false
          token: ${{ secrets.CODECOV_TOKEN }}

  unused-backend:
    name: Check unused cargo dependencies
    runs-on: ubuntu-latest
    env:
      SQLX_OFFLINE: true
    steps:
      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
        with:
          persist-credentials: false

      - name: Install nightly toolchain
        uses: dtolnay/rust-toolchain@b3b07ba8b418998c39fb20f53e8b695cdcc8de1b
        with:
          toolchain: nightly

      - name: Install udeps
        uses: taiki-e/install-action@83254c543806f3224380bf1001d6fac8feaf2d0b # v2.50.10
        with:
          tool: cargo-udeps

      - name: create empty `dist` directory in the frontend
        working-directory: frontend
        run: mkdir dist

      - name: cargo udeps
        working-directory: backend
        run: cargo udeps --workspace --all-targets

  build-docker:
    name: Build Docker image
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    steps:
      - name: Checkout sources
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
        with:
          persist-credentials: false
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@b5ca514318bd6ebac0fb2aedd5d36ec1b5c232a2 # v3.10.0

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Create version tag
        shell: bash
        run: echo "tag=$(git show -s --format="%ct-%h" $GITHUB_SHA)" >> $GITHUB_ENV

      - name: Build Docker image
        uses: docker/build-push-action@14487ce63c7a62a4a324b0bfb37086795e31c6c1 # v6.16.0
        env:
          VERSION: ${{ env.tag }}
        with:
          context: .
          file: ./Dockerfile
          build-args: "version=${{ env.tag }}"
          push: true
          tags: "ghcr.io/nijsac-2024/nijsac-website:${{ env.tag }}"
          cache-from: type=gha
          cache-to: type=gha,mode=max

  format-backend:
    name: Format Rust
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
        with:
          persist-credentials: false

      - name: Install rust toolchain
        uses: dtolnay/rust-toolchain@b3b07ba8b418998c39fb20f53e8b695cdcc8de1b
        with:
          toolchain: nightly
          components: rustfmt

      - name: Check formatting
        working-directory: backend
        run: cargo +nightly fmt --all --check -- --config imports_granularity="Crate"

  clippy:
    name: Clippy
    runs-on: ubuntu-latest
    env:
      SQLX_OFFLINE: true
    steps:
      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
        with:
          persist-credentials: false

      - name: Install rust toolchain
        uses: dtolnay/rust-toolchain@b3b07ba8b418998c39fb20f53e8b695cdcc8de1b
        with:
          toolchain: stable
          components: clippy

      - name: Rust cache
        uses: Swatinem/rust-cache@9d47c6ad4b02e050fd481d890b2ea34778fd09d6 # v2.7.8

      - name: create empty `dist` directory in the frontend
        working-directory: frontend
        run: mkdir dist

      - name: Run clippy
        working-directory: backend
        run: cargo clippy --all-targets --all-features -- -D warnings


  audit-dependencies-backend:
    name: Audit Rust dependencies
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
        with:
          persist-credentials: false

      - uses: EmbarkStudios/cargo-deny-action@34899fc7ba81ca6268d5947a7a16b4649013fea1
        with:
          manifest-path: backend/Cargo.toml
          arguments: --workspace --all-features

  # Frontend
  lint-frontend:
    name: Lint frontend
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
        with:
          persist-credentials: false
      - uses: actions/setup-node@49933ea5288caeca8642d1e84afbd3f7d6820020 # 4.4.0
        with:
          node-version: '22'
      - name: eslint
        working-directory: frontend
        run: |
          npm install
          npx eslint "src/**/*.{js,jsx,ts,tsx}"

  outdated-frontend:
    runs-on: ubuntu-latest
    name: Check for outdated or unused frontend dependencies
    steps:
      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
        with:
          persist-credentials: false
      - uses: actions/setup-node@49933ea5288caeca8642d1e84afbd3f7d6820020 # 4.4.0
        with:
          node-version: '20'
      - working-directory: frontend
        run: |
          npm install
          npm install -g depcheck
          depcheck --ignores=eslint-config-react-app
